// Participants table: display name for email is 'Participant_Email (Primary)'
Set(
    varMe,
    LookUp(
        Participants,
        'Participant_Email (Primary)' = User().Email
    )
);


// Build a single record with Match, my link, partner link, and partner participant
Set(
    varLatestMatch,
    With(
        {
            myLastLink: First(
                Sort(
                    Filter('Match_Member', 'Participant_Email' = varMe),   // lookup→lookup
                    'Created On',
                    Descending
                )
            )
        },
        If(
            IsBlank(myLastLink),
            Blank(),
            With(
                {
                    matchRow: myLastLink.'Match', // lookup to Match
                    partnerLink: LookUp(
                        'Match_Member',
                        'Match' = matchRow &&
                        'Participant_Email' <> varMe
                    ),
                    partnerRow: If(!IsBlank(partnerLink), partnerLink.'Participant_Email') // lookup to Participant
                },
                {
                    // Nice, bindable shape
                    MatchID: matchRow.'ID (Primary)',   // Match table’s primary name / autonumber
                    Match: matchRow,                    // full Match record
                    MyLink: myLastLink,                 // my Match_Member row
                    PartnerLink: partnerLink,           // partner’s Match_Member row
                    Partner: partnerRow                 // full Participant record
                }
            )
        )
    )
);

ClearCollect(
    colMyMatches,
    AddColumns(
        Sort(
            Filter('Match_Member', 'Participant_Email' = varMe),
            'Created On',
            Descending
        ),
        "MatchRow",    ThisRecord.'Match',
        "PartnerLink", LookUp(
                           'Match_Member',
                           'Match' = ThisRecord.'Match' &&
                           'Participant_Email' <> varMe
                       ),
        "PartnerRow",  If(!IsBlank(PartnerLink), PartnerLink.'Participant_Email')
    )
);


// Resolve me (text email on Participants)
Set(
    varMe,
    LookUp(Participants, 'Participant_Email (Primary)' = User().Email)
);

// Build latest match object (robust + trio-safe)
Set(
    varLatestMatch,
    With(
        {
            myLastLink: First(
                Sort(
                    Filter('Match_Member', 'Participant_Email' = varMe),   // lookup → lookup
                    'Created On',
                    Descending
                )
            )
        },
        If(
            IsBlank(myLastLink),
            Blank(),
            With(
                { matchRef: myLastLink.'Match' },                          // <-- lookup to Match
                With(
                    {
                        // all other members of this same match (excl. me)
                        partnerLinks: Filter(
                            'Match_Member',
                            'Match' = matchRef &&
                            'Participant_Email' <> varMe
                        ),
                        primaryPartnerLink: If(CountRows(partnerLinks) > 0, First(partnerLinks)),

                        // pull a concrete Participant record to avoid lazy network lookups
                        partnerRec: If(
                            !IsBlank(primaryPartnerLink),
                            LookUp(
                                Participants,
                                'Participant_Email (Primary)' =
                                    primaryPartnerLink.'Participant_Email'.'Participant_Email (Primary)'
                            )
                        )
                    },
                    {
                        // final shaped record
                        MatchID: matchRef.'ID (Primary)',
                        Match: matchRef,
                        MyLink: myLastLink,
                        PartnerLink: primaryPartnerLink,
                        Partner: partnerRec,                    // <-- safe to deref e.g. .Location
                        PartnerCount: CountRows(partnerLinks)
                    }
                )
            )
        )
    )
);

